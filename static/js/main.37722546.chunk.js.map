{"version":3,"sources":["IconFont/IconFontModal.js","IconFont/IconFont.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","IconFontModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","visible","confirmLoading","showModal","setState","console","log","handleOk","e","setTimeout","data","form","validateFields","err","values","currentIconFont","objectId","reqwest","url","type","method","contentType","success","res","message","info","refreshFunction","error","handleCancel","iconChange","value","target","icon","_this$props","allThemes","title","getFieldDecorator","iconDiv","react_default","a","createElement","class","rel","href","onClick","modal","onOk","onCancel","destroyOnClose","es_form","Item","label","hasFeedback","rules","require","initialValue","hasOwnProperty","input","prefix","placeholder","onChange","name","map","item","color","required","size","description","rows","React","Component","Form","create","IconFontView","colums","dataIndex","key","render","text","className","record","src_IconFont_IconFontModal","refresh","bind","assertThisInitialized","divider","popconfirm","onConfirm","onClickRemove","onClickRemoveCancel","okText","cancelText","initLoading","loading","list","mentionLoading","suggestions","getColums","callBack","getData","fetchSuggestions","callback","onSearchChange","_this2","index","push","dic","tag","toUpperCase","newList","slice","_this3","event","_this4","theme","copy","JSON","stringify","_this$state","that","menu","es_menu","onClickToClipBoard","mention","style","width","dropdown","overlay","es_icon","table","Table","rowKey","columns","dataSource","Header","Layout","Content","Sider","App","Menu","SubMenu","collapsed","toggle","layout","minHeight","trigger","collapsible","defaultSelectedKeys","mode","background","padding","margin","IconFont_IconFont","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37722546.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal , Input , Form , Button , message} from 'antd'\nimport reqwest from 'reqwest';\nimport \"./IconFontModal.css\";\n// import \"http//at.alicdn.com/t/font_1143475_316yf23v5d4.css\"\n\nconst { TextArea } = Input;\n\nclass IconFontModal extends React.Component {\n\n    state = {\n        visible : false,\n        confirmLoading : false,\n    }\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    componentDidMount() {\n        this.props.form.validateFields();\n        this.setState({\n            icon : this.props.currentIconFont && this.props.currentIconFont.icon ? this.props.currentIconFont.icon : \"\",\n        });\n    }\n\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n        console.log(this.props);\n    }\n\n    handleOk = (e) => {\n        this.setState({\n            confirmLoading : true,\n        });\n\n        setTimeout(()=>{\n            var data = {};\n            this.props.form.validateFields((err , values) => {\n                data = values;\n            });\n\n            if (this.props.currentIconFont){\n                data['objectId'] = this.props.currentIconFont.objectId;\n            }\n\n            reqwest({\n                url: 'https://xmi-iconfont.leanapp.cn/indexs/editIconFont',\n                type: 'json',\n                method: 'get',\n                contentType: 'application/json',\n                data:data,\n                success: (res)=>{\n                    message.info(\"修改成功\");\n                    this.props.refreshFunction();\n                    this.setState({\n                        visible: false,\n                        confirmLoading: false,\n                    });\n                },\n                error: (err) => {\n                    message.error(\"修改失败\");\n                    this.setState({\n                        visible: false,\n                        confirmLoading: false,\n                    });\n                }\n            });\n        },2000);\n    }\n\n    handleCancel = (e) => {\n        this.setState({\n            visible: false,\n        })\n    }\n\n    iconChange =(e) => {\n        const { value } = e.target;\n        this.setState({\n            icon : value,\n        })\n    }\n\n\n\n    render() {\n\n        const { allThemes , currentIconFont , title } = this.props;\n        const { getFieldDecorator  } = this.props.form;\n        const { icon } = this.state;\n        const formItemLayout = {\n\n        };\n\n        var iconDiv = (\n            <i class={\"iconfont \"+ icon}></i>\n        );\n\n        return (\n            <span>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"https://at.alicdn.com/t/font_1143475_316yf23v5d4.css\"/>\n                <a onClick={this.showModal}>\n                    {title}\n                </a>\n                <Modal\n                     title = \"这是一个iconfont\"\n                    visible={this.state.visible}\n                    onOk = {this.handleOk}\n                    onCancel={this.handleCancel}\n                     confirmLoading={this.state.confirmLoading}\n                     destroyOnClose={true}\n                >\n                    <Form {...formItemLayout} >\n                        <Form.Item label={\"定义图标\"} hasFeedback={true}>\n                            {\n                                getFieldDecorator(\"icon\",{\n                                    rules:[{require: true , message: \"iconfont 图片配置不能为空\"}],\n                                    initialValue:currentIconFont && currentIconFont.hasOwnProperty(\"icon\") ? currentIconFont.icon : \"\",\n                                })(\n                                    <Input prefix={iconDiv} placeholder=\"请输入图标值\" onChange={this.iconChange}/>\n                                )\n                            }\n                        </Form.Item>\n                        <Form.Item label={\"定义Key\"} hasFeedback={true}>\n                            {\n                                getFieldDecorator('name' , {\n                                    rules: [{require: true , message: \"iconfont key不能为空\"}], initialValue:currentIconFont && currentIconFont.hasOwnProperty(\"name\") ? currentIconFont.name : \"\",\n                                })(\n                                    <Input  placeholder=\"请输入key值\"/>\n                                )\n                            }\n                        </Form.Item>\n                        {\n                            allThemes.map(function (item) {\n                                var color = currentIconFont && currentIconFont.hasOwnProperty(item) ? currentIconFont[item] : \"\"\n                                return <Form.Item label={item} hasFeedback={true}>\n                                        {\n                                            getFieldDecorator( item , {\n                                                initialValue: color,\n                                                rules: [{required : false}],\n                                            })\n                                            (<Input placeholder=\"请输入颜色值\" />)\n                                        }\n                                </Form.Item>\n                            })\n                        }\n                        <Form.Item label={\"大小\"} hasFeedback={true}>\n                            {\n                                getFieldDecorator('size' , {\n                                    initialValue:currentIconFont && currentIconFont.hasOwnProperty(\"size\")?currentIconFont.size : \"\",\n                                    rules: [{require: false }],\n                                })(<Input placeholder=\"请输入配置大小（暂时未用）\" />)\n                            }\n                        </Form.Item>\n                        <Form.Item label={\"描述\"} hasFeedback={true}>\n                            {\n\n                                getFieldDecorator('description' , {\n                                    initialValue:currentIconFont && currentIconFont.hasOwnProperty(\"description\")?currentIconFont.description : \"\",\n                                    rules: [{require: false }]\n                                })(\n                                    <TextArea rows={3} placeholder=\"请输入该图片描述\"/>\n                                )\n                            }\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </span>\n\n\n        )\n    }\n}\n\nexport default Form.create()(IconFontModal);","\nimport React from 'react';\nimport { Table , Divider , Tag , Button , Mention , Popconfirm  , Menu , Dropdown , Icon , message , Badge} from 'antd';\nimport IconfontModal from './IconFontModal.js';\nimport reqwest from 'reqwest';\nimport IconFontModal from \"./IconFontModal\";\nimport copy from 'copy-to-clipboard';\nimport \"./IconFont.css\";\n\nclass IconFontView extends React.Component {\n\n    state = {\n        allThemes: [],\n        colums: [{\n            title: 'icon',\n            dataIndex: 'icon',\n            key: 'icon',\n            render: text =>(\n                <i className={\"iconfont \"+text}></i>\n            )\n        },{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: text => <a href=\"javascript:;\">{text}</a>,\n        },{\n            title: '描述',\n            dataIndex: 'description',\n            key: 'description',\n        },{\n            title: '大小',\n            dataIndex: 'size',\n            key: 'size',\n        },{\n            title: 'Action',\n            key: 'action',\n            render: (text , record) =>  (\n                <span>\n                    <IconFontModal allThemes={this.state.allThemes} currentIconFont={record} title={\"edit\"} refreshFunction={this.refresh.bind(this)}/>\n                    <Divider type=\"vertical\"/>\n                    <Popconfirm title={\"确定需要删除该条配置信息\"} onConfirm={this.onClickRemove.bind(this , record)} onCancel={ this.onClickRemoveCancel} okText=\"删除\" cancelText=\"取消\">\n                        <a href=\"javascript:;\">remove</a>\n                    </Popconfirm>\n        </span>\n            )\n        }],\n        initLoading : true,\n        loading: false,\n        data: [],\n        list: [],\n\n        mentionLoading: false,\n        suggestions: [],\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.getColums((res) => {\n            var count = []\n            console.log(res);\n            for (var index in res.data) {\n                var value = res.data[index];\n                this.state.allThemes.push(value)\n                var dic = {\n                    title : value ,\n                    dataIndex: value,\n                    key : value ,\n                    render: text =><Tag>{text.toUpperCase()}</Tag>\n                };\n                var newList = this.state.colums.slice(0 , -1);\n                newList.push(dic);\n                newList.push(this.state.colums.slice(-1)[0]);\n                this.state.colums = newList;\n                this.setState({\n                    colums : newList,\n                    list : this.state.list,\n                });\n            }\n\n        });\n        this.refresh();\n    }\n\n    refresh() {\n        console.log(\"refresh\");\n        this.getData((res) => {\n            this.setState({\n                initLoading: false,\n                data: res,\n                list: res.data,\n            });\n        });\n    }\n\n    getColums = (callBack) => {\n        reqwest({\n            url: 'https://xmi-iconfont.leanapp.cn/indexs/getThemes',\n            type: 'json',\n            method: 'get',\n            contentType: 'application/json',\n            success: (res) => {\n                callBack(res);\n            },\n        });\n    }\n\n    getData = (callBack) => {\n        reqwest({\n            url: 'https://xmi-iconfont.leanapp.cn/indexs/getIconFontList',\n            type:'json',\n            method: 'get',\n            contentType: 'application/json',\n            success: (res) => {\n                callBack(res);\n            },\n        });\n    }\n\n    fetchSuggestions = (value , callback) => {\n        setTimeout(() => {\n            reqwest({\n                url: 'https://xmi-iconfont.leanapp.cn/indexs/searchIconFont',\n                type: 'json',\n                method: 'get',\n                contentType: 'application/json',\n                data:{'key' : value},\n                success: (res)=>{\n                    callback(res);\n                },\n            });\n        },500)\n    }\n\n    onSearchChange = (value) => {\n        console.log(value);\n        this.fetchSuggestions(value , (suggestions) => {\n            console.log(suggestions);\n            this.setState({\n                suggestions,\n                loading: false,\n                list : suggestions.data\n            });\n\n        });\n        this.setState({\n            loading: true,\n        });\n    }\n\n    onClickRemove(record , event) {\n\n        reqwest({\n            url: 'https://xmi-iconfont.leanapp.cn/indexs/removeIconFont',\n            type: 'json',\n            method: 'get',\n            contentType: 'application/json',\n            data:{'objectId' : record['objectId']},\n            success: (res)=>{\n                console.log(res);\n                this.refresh();\n            },\n        });\n    }\n    onClickRemoveCancel = (e) => {\n        console.log(e)\n    }\n\n    onClickToClipBoard(item) {\n        reqwest({\n            url: 'https://xmi-iconfont.leanapp.cn/indexs/getAllIconFonts',\n            type: 'json',\n            method: 'get',\n            contentType: 'application/json',\n            data:{'theme' : item},\n            success: (res)=>{\n                copy(JSON.stringify(res));\n                message.info(\"复制剪贴板成功。\")\n            },\n        });\n    }\n\n\n\n    render(){\n        const { initLoading , loading , colums , list , mentionLoading , suggestions} = this.state;\n        // const loadMore = !initLoading && !loading? (\n        //     <div style={{ textAlign: 'center' , marginTop: 12 , height:32 , lineHeight: '32px' ,}}>\n        //         <Button onClick = {this.onLoadMore}> loading more</Button>\n        //     </div>\n        // ) : null;\n        const that = this;\n\n        var menu = (\n            <Menu>\n                {\n                    this.state.allThemes.map(function (item) {\n                        return <Menu.Item onClick={that.onClickToClipBoard.bind(this , item)}>\n                            <a href=\"#\" >{item}</a>\n                        </Menu.Item>\n                        })\n                }\n            </Menu>\n        )\n\n        return (\n            <div>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"https://at.alicdn.com/t/font_1143475_316yf23v5d4.css\"/>\n                <Mention style={{ width: '90%'}} loading={mentionLoading} suggestions={suggestions} onSearchChange={this.onSearchChange}/>\n                <dic> <IconFontModal allThemes={this.state.allThemes} title={\"Add\"} refreshFunction={this.refresh.bind(this)}/></dic>\n                <Divider type=\"vertical\"/>\n                <Dropdown overlay={menu} ><a href=\"#\">复制至剪贴板<Icon type=\"down\"/></a></Dropdown>\n                <Divider/>\n               <Table Table rowKey = {record => record.objectId} columns={colums} dataSource={list}/>\n            </div>\n        );\n    }\n}\n\nexport default IconFontView;","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout , Menu , Icon } from 'antd';\nimport IconFontView from './IconFont/IconFont.js';\n\nconst { Header , Content  , Sider , } = Layout;\nconst  SubMenu = Menu.SubMenu;\n\nclass App extends Component {\n\n  state = {\n    collapsed: false,\n  };\n\n  toggle=()=> {\n    this.setState({\n        collapsed: !this.state.collapsed,\n    });\n  }\n\n  render() {\n    return (\n        <Layout style={{ minHeight: '100vh' }}>\n          <Sider\n            trigger={null}\n            collapsible\n            collapsed={this.state.collapsed}\n          >\n              <div className=\"logo\" />\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode = \"inline\">\n                <Menu.Item key=\"1\">\n                   <Icon type=\"smile\"/>\n                    <span>IconFont</span>\n                </Menu.Item>\n                <Menu.Item key = \"2\">\n                    <Icon type=\"skin\"/>\n                    <span>Theme</span>\n                </Menu.Item>\n            </Menu>\n          </Sider>\n          <Layout>\n            <Header style={{ background: '#fff' , padding: 0 }}>\n                <Icon\n                    className=\"trigger\"\n                    type={this.state.collapsed? 'menu-unfold' : 'menu-fold'}\n                    onClick={this.toggle}\n                />\n            </Header>\n            <Content style={{\n              margin: '24px 16px' , padding: 24 , background: '#fff' , minHeight: 280\n            }}>\n               <IconFontView/>\n            </Content>\n          </Layout>\n        </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}